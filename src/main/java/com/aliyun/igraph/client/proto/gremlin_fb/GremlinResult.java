// automatically generated by the FlatBuffers compiler, do not modify

package com.aliyun.igraph.client.proto.gremlin_fb;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * @author alibaba
 */
@SuppressWarnings("unused")
public final class GremlinResult extends Table {
  public static GremlinResult getRootAsGremlinResult(ByteBuffer _bb) { return getRootAsGremlinResult(_bb, new GremlinResult()); }
  public static GremlinResult getRootAsGremlinResult(ByteBuffer _bb, GremlinResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public GremlinResult __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public MultiErrorInfo errorInfos() { return errorInfos(new MultiErrorInfo()); }
  public MultiErrorInfo errorInfos(MultiErrorInfo obj) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
  public String traceInfo() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer traceInfoAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public Result result(int j) { return result(new Result(), j); }
  public Result result(Result obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int resultLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createGremlinResult(FlatBufferBuilder builder,
      int error_infosOffset,
      int trace_infoOffset,
      int resultOffset) {
    builder.startObject(3);
    GremlinResult.addResult(builder, resultOffset);
    GremlinResult.addTraceInfo(builder, trace_infoOffset);
    GremlinResult.addErrorInfos(builder, error_infosOffset);
    return GremlinResult.endGremlinResult(builder);
  }

  public static void startGremlinResult(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addErrorInfos(FlatBufferBuilder builder, int errorInfosOffset) { builder.addOffset(0, errorInfosOffset, 0); }
  public static void addTraceInfo(FlatBufferBuilder builder, int traceInfoOffset) { builder.addOffset(1, traceInfoOffset, 0); }
  public static void addResult(FlatBufferBuilder builder, int resultOffset) { builder.addOffset(2, resultOffset, 0); }
  public static int createResultVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startResultVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGremlinResult(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishGremlinResultBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

