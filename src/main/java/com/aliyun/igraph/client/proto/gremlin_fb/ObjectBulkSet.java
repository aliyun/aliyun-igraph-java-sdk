// automatically generated by the FlatBuffers compiler, do not modify

package com.aliyun.igraph.client.proto.gremlin_fb;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

/**
 * @author alibaba
 */
@SuppressWarnings("unused")
public final class ObjectBulkSet extends Table {
    public static ObjectBulkSet getRootAsObjectBulkSet(ByteBuffer _bb) { return getRootAsObjectBulkSet(_bb, new ObjectBulkSet()); }
    public static ObjectBulkSet getRootAsObjectBulkSet(ByteBuffer _bb, ObjectBulkSet obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
    public ObjectBulkSet __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

    public ObjectVec keyObject() { return keyObject(new ObjectVec()); }
    public ObjectVec keyObject(ObjectVec obj) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }
    public long bulkCount(int j) { int o = __offset(6); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
    public int bulkCountLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
    public ByteBuffer bulkCountAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }

    public static int createObjectBulkSet(FlatBufferBuilder builder,
                                          int key_objectOffset,
                                          int bulk_countOffset) {
        builder.startObject(2);
        ObjectBulkSet.addBulkCount(builder, bulk_countOffset);
        ObjectBulkSet.addKeyObject(builder, key_objectOffset);
        return ObjectBulkSet.endObjectBulkSet(builder);
    }

    public static void startObjectBulkSet(FlatBufferBuilder builder) { builder.startObject(2); }
    public static void addKeyObject(FlatBufferBuilder builder, int keyObjectOffset) { builder.addOffset(0, keyObjectOffset, 0); }
    public static void addBulkCount(FlatBufferBuilder builder, int bulkCountOffset) { builder.addOffset(1, bulkCountOffset, 0); }
    public static int createBulkCountVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
    public static void startBulkCountVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
    public static int endObjectBulkSet(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }
}
