// automatically generated by the FlatBuffers compiler, do not modify

package com.aliyun.igraph.client.proto.gremlin_fb;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * @author alibaba
 */
@SuppressWarnings("unused")
public final class DocData extends Table {
  public static DocData getRootAsDocData(ByteBuffer _bb) { return getRootAsDocData(_bb, new DocData()); }
  public static DocData getRootAsDocData(ByteBuffer _bb, DocData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public DocData __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public String allocatorName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer allocatorNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public MatchRecords records() { return records(new MatchRecords()); }
  public MatchRecords records(MatchRecords obj) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(o + bb_pos), bb) : null; }

  public static int createDocData(FlatBufferBuilder builder,
      int allocator_nameOffset,
      int recordsOffset) {
    builder.startObject(2);
    DocData.addRecords(builder, recordsOffset);
    DocData.addAllocatorName(builder, allocator_nameOffset);
    return DocData.endDocData(builder);
  }

  public static void startDocData(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addAllocatorName(FlatBufferBuilder builder, int allocatorNameOffset) { builder.addOffset(0, allocatorNameOffset, 0); }
  public static void addRecords(FlatBufferBuilder builder, int recordsOffset) { builder.addOffset(1, recordsOffset, 0); }
  public static int endDocData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

